name: iOS Build

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-13

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Set active Xcode path
        run: |
          # Напрямую используем доступную версию Xcode на macOS-13 раннере
          # НЕ используем версию из versions.json для выбора Xcode
          echo "Доступные версии Xcode:"
          ls -la /Applications/ | grep Xcode
          
          # Используем Xcode 15.2, который должен быть доступен на macOS-13
          sudo xcode-select -s /Applications/Xcode_15.2.app/Contents/Developer
          echo "Используется доступная версия Xcode: $(xcodebuild -version)"
          
          # Обновляем versions.json для совместимости с сборкой
          # Сохраняем оригинальные ключи bazel и macos, но используем правильный хэш для Bazel
          ORIGINAL_MACOS_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["macos"]);')
          CORRECT_BAZEL_VERSION_WITH_HASH="7.3.1:19c22c6095bbd9a65de93736883c89770c7f4e88935e8b7d682b0188bb515d93"
          echo "Оригинальная версия macOS: $ORIGINAL_MACOS_VERSION"
          echo "Используемая версия Bazel с корректным хешем: $CORRECT_BAZEL_VERSION_WITH_HASH"
          echo "Обновляем versions.json (Xcode=15.2, Bazel=$CORRECT_BAZEL_VERSION_WITH_HASH, macOS=$ORIGINAL_MACOS_VERSION)..."
          echo "{\"app\":\"10.5.0\",\"xcode\":\"15.2\",\"bazel\":\"$CORRECT_BAZEL_VERSION_WITH_HASH\",\"macos\":\"$ORIGINAL_MACOS_VERSION\"}" > versions.json
          echo "Содержимое versions.json после обновления:"
          cat versions.json
          
      - name: Create canonical source directory
        run: |
          set -x
          sudo mkdir -p /Users/Shared
          cp -R $GITHUB_WORKSPACE /Users/Shared/
          mv /Users/Shared/$(basename $GITHUB_WORKSPACE) /Users/Shared/telegram-ios

      - name: Manually Install Bazel
        run: |
          echo "Устанавливаем Bazel 7.3.1 вручную в путь, ожидаемый скриптом..."
          
          # Создаем ожидаемую директорию
          SOURCE_DIR=/Users/Shared/telegram-ios
          BAZEL_DIR="$SOURCE_DIR/build-input"
          mkdir -p "$BAZEL_DIR"
          
          # Скачиваем Bazelisk в ожидаемую директорию
          curl -Lo "$BAZEL_DIR/bazel-7.3.1-darwin-x86_64" https://github.com/bazelbuild/bazelisk/releases/download/v1.19.0/bazelisk-darwin-amd64
          chmod +x "$BAZEL_DIR/bazel-7.3.1-darwin-x86_64"
          
          # Проверяем установку
          echo "Установленная версия Bazel:"
          "$BAZEL_DIR/bazel-7.3.1-darwin-x86_64" --version
          
          # Также устанавливаем глобально для возможного использования в других местах
          mkdir -p ~/bin
          cp "$BAZEL_DIR/bazel-7.3.1-darwin-x86_64" ~/bin/bazel
          chmod +x ~/bin/bazel
          echo "PATH=$HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Build the App
        run: |
          set -x

          # source code paths are included in the final binary, so we need to make them stable across builds
          SOURCE_DIR=/Users/Shared/telegram-ios

          cd $SOURCE_DIR

          BUILD_NUMBER_OFFSET="$(cat build_number_offset)"

          export APP_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["app"]);')
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+$BUILD_NUMBER_OFFSET))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          echo "BUILD_NUMBER=$(echo $BUILD_NUMBER)" >> $GITHUB_ENV
          echo "APP_VERSION=$(echo $APP_VERSION)" >> $GITHUB_ENV

          python3 build-system/Make/ImportCertificates.py --path build-system/fake-codesigning/certs
          python3 -u build-system/Make/Make.py \
            --overrideXcodeVersion \
            --bazel="$SOURCE_DIR/build-input/bazel-7.3.1-darwin-x86_64" \
            build \
            --configurationPath="build-system/appstore-configuration.json" \
            --codesigningInformationPath=build-system/fake-codesigning \
            --configuration=release_arm64 \
            --buildNumber="$BUILD_NUMBER"

          # collect ipa
          OUTPUT_PATH="build/artifacts"
          rm -rf "$OUTPUT_PATH"
          mkdir -p "$OUTPUT_PATH"
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/Telegram.ipa; do
            cp "$f" $OUTPUT_PATH/
          done

          # collect dsym
          mkdir -p build/DSYMs
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/*.dSYM; do
            cp -R "$f" build/DSYMs/
          done
          zip -r "./$OUTPUT_PATH/Telegram.DSYMs.zip" build/DSYMs 1>/dev/null

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ env.BUILD_NUMBER }}
          release_name: Telegram ${{ env.APP_VERSION }} (${{ env.BUILD_NUMBER }})
          body: |
            Telegram for iOS ${{ env.APP_VERSION }} (Build ${{ env.BUILD_NUMBER }})
          draft: false
          prerelease: false

      - name: Upload Release IPA
        id: upload-release-ipa 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /Users/Shared/telegram-ios/build/artifacts/Telegram.ipa
          asset_name: Telegram.ipa
          asset_content_type: application/zip

      - name: Upload Release DSYM
        id: upload-release-dsym 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: /Users/Shared/telegram-ios/build/artifacts/Telegram.DSYMs.zip
          asset_name: Telegram.DSYMs.zip
          asset_content_type: application/zip
